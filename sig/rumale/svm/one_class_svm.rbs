module Rumale
  module SVM
    class OneClassSVM
      include Base::BaseEstimator
      include Validation

      def initialize: (?nu: Float nu, ?kernel: String kernel, ?degree: Integer degree, ?gamma: Float gamma, ?coef0: Float coef0,
                       ?shrinking: bool shrinking, ?cache_size: Float cache_size, ?tol: Float tol,
                       ?verbose: bool verbose, ?random_seed: untyped? random_seed) -> void
      def fit: (Numo::DFloat x, ?untyped? _y) -> OneClassSVM
      def decision_function: (Numo::DFloat x) -> Numo::DFloat
      def predict: (Numo::DFloat x) -> Numo::Int32
      def predict_proba: (Numo::DFloat x) -> Numo::DFloat
      def marshal_dump: () -> { params: Hash[Symbol, untyped], model: untyped }
      def marshal_load: (Hash[Symbol, untyped] obj) -> void
      def support: () -> Numo::Int32
      def support_vectors: () -> Numo::DFloat
      def n_support: () -> Integer
      def duel_coef: () -> Numo::DFloat
      def intercept: () -> Numo::DFloat

      private

      def libsvm_params: () -> untyped
      def trained?: () -> bool
    end
  end
end
