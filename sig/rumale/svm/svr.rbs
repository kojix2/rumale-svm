module Rumale
  module SVM
    class SVR
      include Base::BaseEstimator
      include Base::Regressor

      def initialize: (?reg_param: Float reg_param, ?epsilon: Float epsilon, ?kernel: String kernel, ?degree: Integer degree,
                       ?gamma: Float gamma, ?coef0: Float coef0, ?shrinking: bool shrinking,
                       ?cache_size: Float cache_size, ?tol: Float tol,
                       ?verbose: bool verbose, ?random_seed: untyped? random_seed) -> void
      def fit: (Numo::DFloat x, Numo::DFloat y) -> SVR
      def predict: (Numo::DFloat x) -> Numo::DFloat
      def marshal_dump: () -> { params: Hash[Symbol, untyped], model: untyped }
      def marshal_load: (Hash[Symbol, untyped] obj) -> void
      def support: () -> Numo::Int32
      def support_vectors: () -> Numo::DFloat
      def n_support: () -> Integer
      def duel_coef: () -> Numo::DFloat
      def intercept: () -> Numo::DFloat

      private

      def add_index_col: (Numo::DFloat x) -> Numo::DFloat
      def del_index_col: (Numo::DFloat x) -> Numo::DFloat
      def precomputed_kernel?: () -> bool
      def libsvm_params: () -> untyped
      def trained?: () -> bool
    end
  end
end
